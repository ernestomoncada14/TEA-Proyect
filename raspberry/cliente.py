import socketio # type: ignore
import requests
import threading

# URL del servidor
BASE_URL = "http://localhost:3000"

# Cliente Socket.IO
sio = socketio.Client()

@sio.event
def connect():
    print("‚úÖ Conectado al servidor WebSocket")
    # Solicitar la lista de n√∫meros a la API
    response = requests.get(f"{BASE_URL}/api/get-ultimos")
    if response.status_code == 200:
        print("üì• Lista de ultimos 3 n√∫meros:")
        for numero in response.json():
            print(f"numero con ID={numero['id']} | N√∫mero={numero['numero']}")
    else:
        print(f"‚ö†Ô∏è Error al obtener la lista de n√∫meros: {response.status_code}")

@sio.on("nuevo-numero")
def nuevo_numero(data):
    print(f"üì• Nuevo n√∫mero recibido: ID={data['id']} | N√∫mero={data['numero']}")

@sio.event
def disconnect():
    print("‚ùå Desconectado del servidor")

# Funci√≥n para enviar nuevos n√∫meros a la API
def enviar_numeros():
    while True:
        numero = input("Ingresa un nuevo n√∫mero (o 'salir' para terminar): ")
        if numero.lower() == "salir":
            break
        try:
            response = requests.post(f"{BASE_URL}/api/numeros", json={"numero": numero})
            if response.status_code == 200:
                print("‚úÖ N√∫mero enviado correctamente")
            else:
                print(f"‚ö†Ô∏è Error al enviar n√∫mero: {response.status_code}")
        except Exception as e:
            print("‚ùå Error de conexi√≥n:", e)

# Iniciar conexi√≥n al WebSocket
sio.connect(BASE_URL)

# Ejecutar el input en un hilo separado para no bloquear el WebSocket
threading.Thread(target=enviar_numeros).start()

# Mantener el cliente vivo
sio.wait()
